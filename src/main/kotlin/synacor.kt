import java.io.File

fun main() {
    val program = File("challenge.bin").readBytes()
        .asList().chunked(2).map {
            it[0].toUByte().toInt() + (it[1].toUByte().toInt() shl 8)
        }.toIntArray()

    val vm = VirtualMachine(program)

    vm.run(buildString {
        appendLine("take tablet")
        appendLine("use tablet")
        appendLine("go doorway")
        appendLine("go north")
        appendLine("go north")
        appendLine("go bridge")
        appendLine("continue")
        appendLine("go down")
        appendLine("go east")
        appendLine("take empty lantern")
        appendLine("go west")
        appendLine("go west")
        appendLine("go passage")
        appendLine("go ladder")
        appendLine("go west")
        appendLine("go south")
        appendLine("go north")
        appendLine("take can")
        appendLine("use can")
        appendLine("go west")
        appendLine("go ladder")
        appendLine("use lantern")
        appendLine("go darkness")
        appendLine("continue")
        appendLine("go west")
        appendLine("go west")
        appendLine("go west")
        appendLine("go west")
        appendLine("go north")
        appendLine("look red coin")
        appendLine("take red coin")
        appendLine("go north")
        appendLine("go west")
        appendLine("look blue coin")
        appendLine("take blue coin")
        appendLine("go up")
        appendLine("look shiny coin")
        appendLine("take shiny coin")
        appendLine("go down")
        appendLine("go east")
        appendLine("go east")
        appendLine("look concave coin")
        appendLine("take concave coin")
        appendLine("go down")
        appendLine("look corroded coin")
        appendLine("take corroded coin")
        appendLine("go up")
        appendLine("go west")
        appendLine("use blue coin")
        appendLine("use red coin")
        appendLine("use shiny coin")
        appendLine("use concave coin")
        appendLine("use corroded coin")
        appendLine("go north")
        appendLine("take teleporter")
        appendLine("use teleporter")
        appendLine("take business card")
        appendLine("look business card")
        appendLine("take strange book")
        appendLine("look strange book")
    })

    vm.mem[32775] = 25734 // calculated by teleporter.kt
    vm.mem[5489] = 21 // skip teleporter confirmation
    vm.mem[5490] = 21 // skip teleporter confirmation

    vm.run(buildString {
        appendLine("use teleporter")
        appendLine("go north")
        appendLine("go north")
        appendLine("go north")
        appendLine("go north")
        appendLine("go north")
        appendLine("go north")
        appendLine("go north")
        appendLine("go east")
        appendLine("take journal")
        appendLine("look journal")
        appendLine("go west")
        appendLine("go north")
        appendLine("go north")
        appendLine("take orb")
    })

    vm.run(OrbPathCalculator().calculate())

    vm.run(buildString {
        appendLine("go vault")
        appendLine("take mirror")
        appendLine("use mirror")
    })
}
